# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        
        odd = head
        even = head.next
        even_head = even

        while even and even.next:
            odd.next = odd.next.next
            odd = odd.next

            even.next = even.next.next
            even = even.next
            
        odd.next = even_head
        
        return head


        #figureing out whats odd and whats even and then change the .next value of the nodes
'''
from linked list I need to return a new ll that re arranges the odd index from the even index. output new linked list that will have odd index at the head in order and even at tail in order

does it matter what the nodes are? 
does the node start at 0? if so, then;

   0  1  2  3  4  
i= 1- 2- 3- 4- 5-

o= 1-3-5-2-4


maybe a two pointer approach? one to store i the other to store curr
'''
        