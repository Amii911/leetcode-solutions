# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]: 
        dummy = ListNode(next=head)
        prev, curr = dummy, head

        while curr:
            next = curr.next

            if curr.val == val:
                prev.next = next
            else:
                prev = curr
                
            curr = curr.next

        return dummy.next

    '''
    return the linked list with all val removed

    if no val in list return list as is

    in order? is ordered?

    loop through list and remove val nodes
    two points? iterate through and remove nodes , update pointer and return new head
    we are creating a dummy head to be ahead of the curr head
    then going to use pointers to iterate through to find val. 
    '''