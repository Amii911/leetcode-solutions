# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        slow, fast = head , head

        for i in range(n):
            fast = fast.next
        if not fast:
            return head.next

        while fast.next:
            slow = slow.next
            fast = fast.next

        slow.next = slow.next.next
        return head



'''
def remove_n_node(head):
    # Initialize two pointers, slow and fast, both pointing to the head of the linked list
    slow, fast = head, head

    # Move the fast pointer n steps ahead
    for i in range(n):
        fast = fast.next

        # If fast becomes None (indicating the end of the list), return head.next
        if not fast:
            return head.next

    # While fast.next is not None, move both pointers towards the end of the linked list
    while fast.next:
        slow = slow.next
        fast = fast.next

    # At this point, slow is pointing to the node right before the node to be removed
    # Update the pointers to skip the next node and effectively remove it from the list
    slow.next = slow.next.next

    # Return the updated head of the linked list
    return head
'''