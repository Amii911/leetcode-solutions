# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        set_node = set()

        while head:
            if head in set_node:
                return head

            else:
                set_node.add(head)
                head = head.next








'''
determine if ll is a cycle. return where the cycle begins. DO NOT MODIFY THE LL. 

what does modify mean? - can't reverse but can have an arr
we are not just looking at value we are looking at pointers
if linked list ends reutrn NONE

-- fast and slow to confirm if cycle 
-- looping through to see if slow == fast // T || F
-- need to locate which node tail is pointing to 
-- return that node

        slow , fast = head , head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

            if slow == fast:
                slow = head
                while slow != fast:
                    slow = slow.next
                    fast = fast.next
                return slow

        return None
        

--- or create a set---
because we want to make sure that there no duplicates
sets are iterable
'''