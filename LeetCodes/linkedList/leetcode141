class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

            if slow == fast:
                return True
        return False



'''
Need to rtrn True is list is cycle and False is not
a cycle is when the linked list does not get to NULL

but if cycle ll will not reach null so using tortoise and hare to have fast and slow, if cycle they will meet. If not they wont. 


#notes from review session
need to return True is linkedlist is a cycle
return False if not

if there are two nodes and nodes repeat fast and slow then true

two pointers? Fast and Slow approach


def linkedListCycle(node):
  slow, fast = head , head

  while fast and fast.next:
    slow = slow.next
    fast = fast.next.next

    if slow == fast:
      return True

    else:
      return False
'''