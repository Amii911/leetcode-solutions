class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        def dfs(x,y):
            
            #out of the boundary
            if x < 0 or x == len(grid[0]) or y <0 or y == len(grid) or not int(grid[y][x] ):
                return False
            
            #mute this / visited this cell 
            grid[y][x] = 0

            #we go right
            dfs(x+1,y)
            #we go left
            dfs(x-1,y)
            #we go up
            dfs(x,y-1)
            #we go down
            dfs(x,y+1)

        #no of islands
        i = 0

        for y in range(len(grid)):
            for x in range(len(grid[0])):
                #current unit in the grid
                cell = int(grid[y][x])
                if cell:
                    i += 1
                    dfs(x,y)            
        return i
    

    #need to create my own solution!!! will be bac



    """
    #bfs
    class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0
        r = len(grid) 
        c = len(grid[0]) 
        result = 0
        for i in range(r):
            for j in range(c):
                if grid[i][j] == '1':
                    result += 1
                    self.markIsland(grid, i, j)
        return result
    
    def markIsland(self, grid, i, j):
        r = len(grid)
        c = len(grid[0])
        grid[i][j] = '0'
        queue = [[i, j]]
        x_dir = [0,0,1,-1]
        y_dir = [1,-1,0,0]
        
        while queue:
            curr = queue.pop(0)
            cx = curr[0]
            cy = curr[1]
            
            for i in range(4):
                nx = cx + x_dir[i]
                ny = cy + y_dir[i]
                
                if nx >= 0 and nx < r and ny >= 0 and ny < c and grid[nx][ny] == '1':
                    queue.append([nx, ny])
                    grid[nx][ny] = '0'"""